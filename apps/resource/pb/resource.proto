//1
syntax = "proto3";

package course.cmdb.resource;
option go_package="github.com/zhou-lincong/CMDB/apps/resource";

import "github.com/infraboard/mcube/pb/page/page.proto";

service Service {
    rpc Search (SearchRequest) returns (ResourceSet);//资源的搜索，通过通用表解锁资源
    //给资源加标签，那这个标签是个跟所有资源相关的，属于通用资源的分支，所以需要提供相应接口
    rpc QueryTag(QueryTagRequest) returns (TagSet);//查询标签，获取当前有哪些Tag
    rpc UpdateTag (UpdateTagRequest) returns (Resource);//更新标签，整个描述信息，放在Resource里面进行描述 
}
//以上是脚手架生成

//以下手写


//Tag选择器，通过key value进行匹配  app-arr1,app-arr2
//以下两个标签共同组成一套业务逻辑,需要过滤promethues.io开头的标签
//例如promethues.io/port = "xxx"，还可能不止一个 
//例如promethues.io/metric_path = "xxx"，还可能不止一个  
message TagSelector {//1.7.1
    //匹配的key，支持like匹配
    //@gotags: json:"key"
    string key =1;
    //匹配符
    //@gotags: json:""
    string operater =2;
    //匹配的值，支持多个值匹配(promethues不支持)
    //@gotags: json:"values"
    repeated string values =3;
}

message SearchRequest {//1.7
    //分页参数
    //@gotags: json:"page"
    infraboard.mcube.page.PageRequest page =1;
    //资源所属域
    //@gotags: json:"domain"
    string domain =2;
    //资源所属空间
    //@gotags: json:"namespace"
    string namespace =3;
    //资源所属环境
    //@gotags: json:"env"
    string env =4;
    //使用方式
    //@gotags: json:"usage_mode"
    optional UsageMode usage_mode =5;
    //厂商
    //@gotags: json:"vendor"
    optional Vendor vendor =6;
    //同步的账号
    //@gotags: json:"sync_account"
    string sync_account =7;
    //资源类型，optional protoc 编译后--->指针类型，意思是允许为空指针
    //@gotags: json:"type"
    optional Type type =8;
    //服务商中的状态
    //@gotags: json:"status"
    string status =9;
    //资源标签
    //@gotags: json:"tags"
    repeated TagSelector tags =10;
    //是否返回资源的标签，如果标签很多，你又不想要，可以控制返回该资源的标签？
    //提升性能，避免一些不必要数据的传输
    //@gotags: json:"with_tags"
    bool with_tags =11;
    //关键字参数
    //@gotags: json:"keywords"
    string keywords =14;
    //是否精确匹配，比如你要匹配IP，10.10.1.1   10.10.1.1xx
    //@gotags: json:"exact_match"
    bool exact_match =15;
}

message ResourceSet {//1.5
    //@gotags: json:"total"
    int64 total =1;//把total放在前面，不然在看数据多少条的时候，需要翻很多条
    //@gotags: json:"items"
    repeated Resource items =2;
}

//1.8
message QueryTagRequest {
    //资源ID
    //@gotags: json:"resource_ids"
    repeated string resource_ids =1;
}

//1.6   获取当前有哪些Tag   可能有很多个tag
message TagSet {
    //@gotags: json:"total"
    int64 total =1;
    //@gotags: json:"items"
    repeated Tag items =2;
}

//1.9.1
enum UpdateAction {
    //添加
    ADD =0;
    //移除
    REMOVE =1;
}

//1.9
message UpdateTagRequest {
    //资源id,需改哪个资源的标签
    //@gotags: json:"id" validate:"required"
    string id =1;
    //资源id
    //@gotags: json:"action"
    UpdateAction action =2;
    //需要添加的资源标签
    //@gotags: json:"tags" validate:"required"
    repeated Tag tags =3;

}

//1.2.1  厂商
enum Vendor {
    ALIYUN = 0;
    TENCENT = 1;
    HUAWEI = 2;
    VSPHERE = 3;//VM虚拟化资源
    AMAZON = 4;
}

//1.2.1    类型
enum Type {
    HOST = 0;//主机
    RDS = 1;
    // 因为中间还会有其他的资源  
    BILL = 99;//账单 所以把账单放大
}

//1.2.1 使用方式
enum UsageMode {
    // 共享使用，需要与其他使用方做共享分摊
    SHARED = 0;
    // 独占使用
    MONOPOLY = 1;
}

//1.2.1 共享策略
message SharePolicy {
    //分享的维度，多个应用，多个使用者
    //@gotags: json:"tag_key"
    string tag_key =1;
    //分享给哪些值，app1,app2,app3      user1,user2,user3
    //@gotags: json:"tag_values"
    repeated string tag_values =2;
}

//1.1 定义资源
message Resource {
    //资源元数据信息，固有信息，比如说云商，不允许变的
    //@gotags: json:"base"
    Base base = 1;
    //资源信息,通用信息,允许变化，比如IP
    //@gotags: json:"information"
    Information information =2;
    //资源释放计划
    //@gotags: json:"release_plan"
    // ReleasePlan release_plan =3;
}

//1.2   基础属性，固有属性
message Base {
    //全局唯一Id，直接使用云上自己的Id，云商内部唯一.用厂商+ID，做到唯一
    //@gotags: json:"id" validate:"required"
    string id =1;
    //同步时间，什么时候被录入系统
    //@gotags: json:"sync_at"
    int64 sync_at =2;
    //用于同步的凭证ID，需要凭证才能读取或操作云商的资源
    //@gotags: json:"secret_id"
    string secret_id =3;
    //厂商
    //@gotags: json:"vendor"
    Vendor vendor =4;
    //资源类型
    //@gotags: json:"resource_type"
    Type resource_type =5;
    //地域  地域区域一般不修改，由创建时指定，后续如需修改可增加API
    //@gotags: json:"region"
    string region =6;
    //区域
    //@gotags: json:"zone"
    string zone =7;
    //创建时间，生产时间    有可能是几年前买的，但是今年才录入
    //@gotags: json:"create_at"
    int64 create_at =8;
    //基础数据Hash,通用属性Hash，用于比对是否需要被更新，提升效率
    //@gotags: json:"resource_hash"
    string resource_hash =10;
    //描述数据Hash,资源特有属性，就是其他的模型表，比如主机，GPU
    //@gotags: json:"describe_hash"
    string describe_hash =11;
    //Resource信息是否有变化    用于描述上面两个信息是否有变话
    //@gotags: json:"resource_hash_changed,omitemty"
    bool resource_hash_changed =12;
    //Describe信息释放有变化
    //@gotags: json:"describe_hash_changed,omitemty"
    bool describe_hash_changed =13;
    //资源所属空间，属于哪个项目，跟权限系统挂钩
    //@gotags: json:"namespace"
    string namespace =14;
    //资源所属环境
    //@gotags: json:"env"
    string env =15;
    //使用方式(可选)
    //@gotags: json:"usage_mode"
    UsageMode usage_mode =16;
    //共享策略，当一个资源被多个应用共享时，可以指定允许的应用
    //@gotags: json:"shared_policy"
    SharePolicy share_policy =17;
    //资源所属域。一个组织或者一个公司，做多租户模型,此模型会包括资源所属空间namespace
    //@gotags: json:"domain"
    string domain =18;
}

//1.3 通过属性, 可能变化, 用于快速解索资源
message Information {
    // 过期时间
    // @gotags: json:"expire_at"
    int64 expire_at = 1;
    // 种类,    比如：计算型, 内存型
    // @gotags: json:"category"
    string category = 2;
    // 规格,根据云商的概念抽象而来，比如最小规格 small(1u1g), 
    // @gotags: json:"type"
    string type = 3;
    // 资源名称
    // @gotags: json:"name"
    string name = 4;
    // 资源描述
    // @gotags: json:"description"
    string description = 5;
    // 服务商中的状态, 需要统一多个云商的状态
    // @gotags: json:"status"
    string status = 6;
    // 资源标签, key=value 一个表情
    // @gotags: json:"tags"
    repeated Tag tags = 7;
    // 更新时间
    // @gotags: json:"update_at"
    int64 update_at = 8;
    // 资源所属的账号
    // @gotags: json:"sync_account"
    string sync_account = 9;
    // 公网IP, 或者域名
    // @gotags: json:"public_ip"
    repeated string public_ip = 10;
    // 内网IP, 或者域名
    // @gotags: json:"private_ip"
    repeated string private_ip = 11;
    // 实例付费方式, 按量, 包年包月, 买断(自己针对IDC)
    // @gotags: json:"pay_type"
    string pay_type = 12;
}

//1.4.1 定义标签的类型
enum TagType {
    // 用户自定义标签, 允许用户修改
    USER = 0;
    // 第三方定义的标签, 比如云商同步过来的标签, 不允许通过本系统修改, 如果有修改，去第三方系统修改
    THIRD = 1;
    // 内部系统使用标签, 禁止用户修改, 表示被其他系统引用, 比如应用关联标签, app=app1
    SYSTEM = 2;
}

//1.4
message Tag {
    //标签属于的资源，通过resource_id来进行关联，根据数据库设计有关系
    //@gotags: json:"resource_id"
    string resource_id =1;
    //标签的类型
    //@gotags: json:"type"
    TagType type =2;
    //标签的key     validate:"lte=255,required--->长度校验
    //@gotags: json:"key" validate:"lte=255,required"
    string key =3;
    //标签的值，可读性不好，appid=0xxx0111
    //@gotags: json:"value" validate:"lte=255,required"
    string value =4;
    //标签的值的描述，通常用于展示，财务系统a
    //@gotags: json:"describe"
    string describe =5;
    //标签权重，针对同一个kay，多个value场景，默认值1
    //有一个资源A，费用100，被多个业务方共同使用，出业务成本，面临这个成本如何分摊的问题？
    //为了让分摊更加灵活，添加标签的权重，更加权重的值做具体分摊比例计算，比如：a:1(1/4),b:2(2/4),c:1(1/4)
    //默认公平分摊，默认就是1，根据资源的使用量进行分摊，外部系统(监控系统)通过使用计算出权重，设置过来
    //@gotags: json:"weight"
    int64 weight =6;
    //标签是否纳入成本统计，比如监控标签就不需要纳入到成本统计
    //@gotags: json:"is_cost"
    bool is_cost =7;
    //标签是否隐藏，用于控制是否在前端展示
    //@gotags: json:"hidden"
    bool hidden =8;
    //标签meta信息，用于对tag的拓展，比如前端需要设置标签的颜色
    //@gotags: json:"meta"
    map<string,string> meta =15;
}


